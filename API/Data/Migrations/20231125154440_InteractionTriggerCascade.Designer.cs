// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.data.migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231125154440_InteractionTriggerCascade")]
    partial class InteractionTriggerCascade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("API.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("text");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("API.Entities.Adventure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("StartingLocationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StartingLocationId");

                    b.ToTable("Adventures");
                });

            modelBuilder.Entity("API.Entities.AdventureSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdventureId")
                        .HasColumnType("integer");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("CurrentLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("SaveDescription")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CurrentLocationId");

                    b.ToTable("AdventureSaves");
                });

            modelBuilder.Entity("API.Entities.AdventureVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdventureId")
                        .HasColumnType("integer");

                    b.Property<string>("InitialValue")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.ToTable("AdventureVariable");
                });

            modelBuilder.Entity("API.Entities.AdventureVariableSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdventureSaveId")
                        .HasColumnType("integer");

                    b.Property<int>("AdventureVariableId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdventureSaveId");

                    b.HasIndex("AdventureVariableId");

                    b.ToTable("AdventureVariableSave");
                });

            modelBuilder.Entity("API.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("KnownAs")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("API.Entities.Container", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsCorpse")
                        .HasColumnType("boolean");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("API.Entities.ContainerSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Complete")
                        .HasColumnType("boolean");

                    b.Property<int>("ContainerId")
                        .HasColumnType("integer");

                    b.Property<int>("LocationSaveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("LocationSaveId");

                    b.ToTable("ContainerSaves");
                });

            modelBuilder.Entity("API.Entities.DialogueLink", b =>
                {
                    b.Property<int>("FromDialogueId")
                        .HasColumnType("integer");

                    b.Property<int>("ToDialogueId")
                        .HasColumnType("integer");

                    b.HasKey("FromDialogueId", "ToDialogueId");

                    b.HasIndex("ToDialogueId");

                    b.ToTable("DialogueLinks");
                });

            modelBuilder.Entity("API.Entities.DialogueNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DialogueNodes");
                });

            modelBuilder.Entity("API.Entities.Enemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArmorValue")
                        .HasColumnType("integer");

                    b.Property<int>("Attack1BaseDamage")
                        .HasColumnType("integer");

                    b.Property<string>("Attack1Name")
                        .HasColumnType("text");

                    b.Property<int>("Attack1Range")
                        .HasColumnType("integer");

                    b.Property<int>("Attack2BaseDamage")
                        .HasColumnType("integer");

                    b.Property<string>("Attack2Name")
                        .HasColumnType("text");

                    b.Property<int>("Attack2Range")
                        .HasColumnType("integer");

                    b.Property<string>("AttackStrategy")
                        .HasColumnType("text");

                    b.Property<int>("MaxHp")
                        .HasColumnType("integer");

                    b.Property<int>("ModifierDiceSides")
                        .HasColumnType("integer");

                    b.Property<int>("MovementRange")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("Enemies");
                });

            modelBuilder.Entity("API.Entities.EnemyLocationLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EnemyId")
                        .HasColumnType("integer");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredPlayerCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EnemyId");

                    b.HasIndex("LocationId");

                    b.ToTable("EnemyLocationLink");
                });

            modelBuilder.Entity("API.Entities.EnemySave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentHp")
                        .HasColumnType("integer");

                    b.Property<int>("EnemyId")
                        .HasColumnType("integer");

                    b.Property<int>("EnemyLocationLinkId")
                        .HasColumnType("integer");

                    b.Property<int>("LocationSaveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EnemyId");

                    b.HasIndex("EnemyLocationLinkId");

                    b.HasIndex("LocationSaveId");

                    b.ToTable("EnemySaves");
                });

            modelBuilder.Entity("API.Entities.Interaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DefaultText")
                        .HasColumnType("text");

                    b.Property<string>("FailedText")
                        .HasColumnType("text");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PassedText")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("API.Entities.InteractionSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Complete")
                        .HasColumnType("boolean");

                    b.Property<int>("InteractionId")
                        .HasColumnType("integer");

                    b.Property<int>("LocationSaveId")
                        .HasColumnType("integer");

                    b.Property<bool>("Passed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("InteractionId");

                    b.HasIndex("LocationSaveId");

                    b.ToTable("InteractionSaves");
                });

            modelBuilder.Entity("API.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArmorValue")
                        .HasColumnType("integer");

                    b.Property<int>("AttackValue")
                        .HasColumnType("integer");

                    b.Property<string>("DamageModifiers")
                        .HasColumnType("text");

                    b.Property<string>("DamageType")
                        .HasColumnType("text");

                    b.Property<string>("ItemType")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ResistanceModifiers")
                        .HasColumnType("text");

                    b.Property<int>("StackSize")
                        .HasColumnType("integer");

                    b.Property<string>("StatModifiers")
                        .HasColumnType("text");

                    b.Property<string>("Use")
                        .HasColumnType("text");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("API.Entities.ItemContainerLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContainerId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemContainerLink");
                });

            modelBuilder.Entity("API.Entities.ItemSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContainerSaveId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentStackSize")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationSaveId")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayerCharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("StorageIndex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContainerSaveId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LocationSaveId");

                    b.HasIndex("PlayerCharacterId");

                    b.ToTable("ItemSaves");
                });

            modelBuilder.Entity("API.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdventureId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("ItemsRequirePurchase")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("RoomNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<string>("VisibilityRequirements")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdventureId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("API.Entities.LocationLink", b =>
                {
                    b.Property<int>("FromId")
                        .HasColumnType("integer");

                    b.Property<int>("ToId")
                        .HasColumnType("integer");

                    b.HasKey("FromId", "ToId");

                    b.HasIndex("ToId");

                    b.ToTable("LocationLink");
                });

            modelBuilder.Entity("API.Entities.LocationSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdventureSaveId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCurrentLocation")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("VisibilityRequirement")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdventureSaveId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationSaves");
                });

            modelBuilder.Entity("API.Entities.NPC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int?>("DialogueId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DialogueId");

                    b.HasIndex("LocationId");

                    b.ToTable("NPCs");
                });

            modelBuilder.Entity("API.Entities.PlayerCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdventureSaveId")
                        .HasColumnType("integer");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("BodyItemSaveId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentHitpoints")
                        .HasColumnType("integer");

                    b.Property<int?>("FeetItemSaveId")
                        .HasColumnType("integer");

                    b.Property<int>("Gold")
                        .HasColumnType("integer");

                    b.Property<int?>("HelmetItemSaveId")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftHandItemSaveId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxHitpoints")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<int?>("RightHandItemSaveId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdventureSaveId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BodyItemSaveId");

                    b.HasIndex("FeetItemSaveId");

                    b.HasIndex("HelmetItemSaveId");

                    b.HasIndex("LeftHandItemSaveId");

                    b.HasIndex("RightHandItemSaveId");

                    b.ToTable("PlayerCharacters");
                });

            modelBuilder.Entity("API.Entities.Trigger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionData")
                        .HasColumnType("text");

                    b.Property<string>("ActionType")
                        .HasColumnType("text");

                    b.Property<int?>("ContainerId")
                        .HasColumnType("integer");

                    b.Property<int?>("DialogueNodeId")
                        .HasColumnType("integer");

                    b.Property<string>("EventType")
                        .HasColumnType("text");

                    b.Property<int?>("InteractionId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("ResultData")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("DialogueNodeId");

                    b.HasIndex("InteractionId");

                    b.HasIndex("LocationId");

                    b.ToTable("Triggers");
                });

            modelBuilder.Entity("API.Entities.TriggerSave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionTriggerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Complete")
                        .HasColumnType("boolean");

                    b.Property<int?>("InteractionId")
                        .HasColumnType("integer");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActionTriggerId");

                    b.HasIndex("InteractionId");

                    b.HasIndex("LocationId");

                    b.ToTable("TriggerSaves");
                });

            modelBuilder.Entity("API.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("API.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RecipientId")
                        .HasColumnType("integer");

                    b.Property<string>("RecipientUsername")
                        .HasColumnType("text");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<string>("SenderUsername")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("API.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ObjectSubType")
                        .HasColumnType("text");

                    b.Property<string>("ObjectType")
                        .HasColumnType("text");

                    b.Property<string>("PublicId")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.AppUserRole", b =>
                {
                    b.HasOne("API.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Connection", b =>
                {
                    b.HasOne("API.Group", null)
                        .WithMany("Connections")
                        .HasForeignKey("GroupName");
                });

            modelBuilder.Entity("API.Entities.Adventure", b =>
                {
                    b.HasOne("API.Entities.Location", "StartingLocation")
                        .WithMany()
                        .HasForeignKey("StartingLocationId");

                    b.Navigation("StartingLocation");
                });

            modelBuilder.Entity("API.Entities.AdventureSave", b =>
                {
                    b.HasOne("API.Entities.Adventure", "Adventure")
                        .WithMany()
                        .HasForeignKey("AdventureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany("AdventureSaves")
                        .HasForeignKey("AppUserId");

                    b.HasOne("API.Entities.LocationSave", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationId");

                    b.Navigation("Adventure");

                    b.Navigation("CurrentLocation");
                });

            modelBuilder.Entity("API.Entities.AdventureVariable", b =>
                {
                    b.HasOne("API.Entities.Adventure", null)
                        .WithMany("Variables")
                        .HasForeignKey("AdventureId");
                });

            modelBuilder.Entity("API.Entities.AdventureVariableSave", b =>
                {
                    b.HasOne("API.Entities.AdventureSave", null)
                        .WithMany("Variables")
                        .HasForeignKey("AdventureSaveId");

                    b.HasOne("API.Entities.AdventureVariable", "AdventureVariable")
                        .WithMany()
                        .HasForeignKey("AdventureVariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdventureVariable");
                });

            modelBuilder.Entity("API.Entities.Container", b =>
                {
                    b.HasOne("API.Entities.Location", null)
                        .WithMany("Containers")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("API.Entities.ContainerSave", b =>
                {
                    b.HasOne("API.Entities.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.LocationSave", "LocationSave")
                        .WithMany("Containers")
                        .HasForeignKey("LocationSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Container");

                    b.Navigation("LocationSave");
                });

            modelBuilder.Entity("API.Entities.DialogueLink", b =>
                {
                    b.HasOne("API.Entities.DialogueNode", "FromDialogue")
                        .WithMany("ToDialogueLinks")
                        .HasForeignKey("FromDialogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.DialogueNode", "ToDialogue")
                        .WithMany()
                        .HasForeignKey("ToDialogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromDialogue");

                    b.Navigation("ToDialogue");
                });

            modelBuilder.Entity("API.Entities.Enemy", b =>
                {
                    b.HasOne("API.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("API.Entities.EnemyLocationLink", b =>
                {
                    b.HasOne("API.Entities.Enemy", "Enemy")
                        .WithMany()
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Location", "Location")
                        .WithMany("EnemyLocationLinks")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enemy");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("API.Entities.EnemySave", b =>
                {
                    b.HasOne("API.Entities.Enemy", "Enemy")
                        .WithMany()
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.EnemyLocationLink", "EnemyLocationLink")
                        .WithMany()
                        .HasForeignKey("EnemyLocationLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.LocationSave", "LocationSave")
                        .WithMany("Enemies")
                        .HasForeignKey("LocationSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enemy");

                    b.Navigation("EnemyLocationLink");

                    b.Navigation("LocationSave");
                });

            modelBuilder.Entity("API.Entities.Interaction", b =>
                {
                    b.HasOne("API.Entities.Location", null)
                        .WithMany("Interactions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.InteractionSave", b =>
                {
                    b.HasOne("API.Entities.Interaction", "Interaction")
                        .WithMany()
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.LocationSave", "LocationSave")
                        .WithMany("Interactions")
                        .HasForeignKey("LocationSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interaction");

                    b.Navigation("LocationSave");
                });

            modelBuilder.Entity("API.Entities.Item", b =>
                {
                    b.HasOne("API.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("API.Entities.ItemContainerLink", b =>
                {
                    b.HasOne("API.Entities.Container", "Container")
                        .WithMany("Items")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Container");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("API.Entities.ItemSave", b =>
                {
                    b.HasOne("API.Entities.ContainerSave", "ContainerSave")
                        .WithMany("Items")
                        .HasForeignKey("ContainerSaveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.LocationSave", "LocationSave")
                        .WithMany("Items")
                        .HasForeignKey("LocationSaveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Entities.PlayerCharacter", null)
                        .WithMany("BackPack")
                        .HasForeignKey("PlayerCharacterId");

                    b.Navigation("ContainerSave");

                    b.Navigation("Item");

                    b.Navigation("LocationSave");
                });

            modelBuilder.Entity("API.Entities.Location", b =>
                {
                    b.HasOne("API.Entities.Adventure", null)
                        .WithMany("Locations")
                        .HasForeignKey("AdventureId");
                });

            modelBuilder.Entity("API.Entities.LocationLink", b =>
                {
                    b.HasOne("API.Entities.Location", "FromLocation")
                        .WithMany("ConnectedToLocations")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Location", "ToLocation")
                        .WithMany("ConnectedFromLocations")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromLocation");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("API.Entities.LocationSave", b =>
                {
                    b.HasOne("API.Entities.AdventureSave", "AdventureSave")
                        .WithMany("LocationSaves")
                        .HasForeignKey("AdventureSaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdventureSave");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("API.Entities.NPC", b =>
                {
                    b.HasOne("API.Entities.DialogueNode", "Dialogue")
                        .WithMany()
                        .HasForeignKey("DialogueId");

                    b.HasOne("API.Entities.Location", null)
                        .WithMany("NPCs")
                        .HasForeignKey("LocationId");

                    b.Navigation("Dialogue");
                });

            modelBuilder.Entity("API.Entities.PlayerCharacter", b =>
                {
                    b.HasOne("API.Entities.AdventureSave", "AdventureSave")
                        .WithMany("PlayerCharacters")
                        .HasForeignKey("AdventureSaveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany("MyCharacters")
                        .HasForeignKey("AppUserId");

                    b.HasOne("API.Entities.ItemSave", "Body")
                        .WithMany()
                        .HasForeignKey("BodyItemSaveId");

                    b.HasOne("API.Entities.ItemSave", "Feet")
                        .WithMany()
                        .HasForeignKey("FeetItemSaveId");

                    b.HasOne("API.Entities.ItemSave", "Helmet")
                        .WithMany()
                        .HasForeignKey("HelmetItemSaveId");

                    b.HasOne("API.Entities.ItemSave", "LeftHand")
                        .WithMany()
                        .HasForeignKey("LeftHandItemSaveId");

                    b.HasOne("API.Entities.ItemSave", "RightHand")
                        .WithMany()
                        .HasForeignKey("RightHandItemSaveId");

                    b.Navigation("AdventureSave");

                    b.Navigation("Body");

                    b.Navigation("Feet");

                    b.Navigation("Helmet");

                    b.Navigation("LeftHand");

                    b.Navigation("RightHand");
                });

            modelBuilder.Entity("API.Entities.Trigger", b =>
                {
                    b.HasOne("API.Entities.Container", null)
                        .WithMany("Triggers")
                        .HasForeignKey("ContainerId");

                    b.HasOne("API.Entities.DialogueNode", null)
                        .WithMany("Triggers")
                        .HasForeignKey("DialogueNodeId");

                    b.HasOne("API.Entities.Interaction", null)
                        .WithMany("Triggers")
                        .HasForeignKey("InteractionId");

                    b.HasOne("API.Entities.Location", null)
                        .WithMany("Triggers")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("API.Entities.TriggerSave", b =>
                {
                    b.HasOne("API.Entities.Trigger", "ActionTrigger")
                        .WithMany()
                        .HasForeignKey("ActionTriggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.InteractionSave", "InteractionSave")
                        .WithMany("TriggerSaves")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("API.Entities.LocationSave", "LocationSave")
                        .WithMany("Triggers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ActionTrigger");

                    b.Navigation("InteractionSave");

                    b.Navigation("LocationSave");
                });

            modelBuilder.Entity("API.Message", b =>
                {
                    b.HasOne("API.Entities.AppUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("API.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("API.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.Adventure", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Variables");
                });

            modelBuilder.Entity("API.Entities.AdventureSave", b =>
                {
                    b.Navigation("LocationSaves");

                    b.Navigation("PlayerCharacters");

                    b.Navigation("Variables");
                });

            modelBuilder.Entity("API.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("AdventureSaves");

                    b.Navigation("MyCharacters");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Entities.Container", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("API.Entities.ContainerSave", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("API.Entities.DialogueNode", b =>
                {
                    b.Navigation("ToDialogueLinks");

                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("API.Entities.Interaction", b =>
                {
                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("API.Entities.InteractionSave", b =>
                {
                    b.Navigation("TriggerSaves");
                });

            modelBuilder.Entity("API.Entities.Location", b =>
                {
                    b.Navigation("ConnectedFromLocations");

                    b.Navigation("ConnectedToLocations");

                    b.Navigation("Containers");

                    b.Navigation("EnemyLocationLinks");

                    b.Navigation("Interactions");

                    b.Navigation("NPCs");

                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("API.Entities.LocationSave", b =>
                {
                    b.Navigation("Containers");

                    b.Navigation("Enemies");

                    b.Navigation("Interactions");

                    b.Navigation("Items");

                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("API.Entities.PlayerCharacter", b =>
                {
                    b.Navigation("BackPack");
                });

            modelBuilder.Entity("API.Group", b =>
                {
                    b.Navigation("Connections");
                });
#pragma warning restore 612, 618
        }
    }
}
